* Turing Drawings with Processing and Arduino
Final project for UCSB Art 122 (Spring 2013) by Kasper Primdal Lauritzen.

** Abstract
I will create a way for the audience to see, create and alter Turing Drawings. A Turing Drawing is a 2D picture that evolves, pixel by pixel, according to simple rules (e.g. if cell is black, paint it white and turn left 90 degrees). It is a Turing Machine with a 2D tape, and a 'heading' on the tape. Simple rules can create powerful patterns, oscillations or seemingly random noise. 

The audience will be able to create a Turing Drawing with randomized rules. Then, if the pattern emerging are interesting, she will be able to save those rules to a growing library of curated rules (maybe with some sort of voting). There will be an option to change the rules of the drawing at any time, either to new random rules or fetching them from the library. 
 
** Background
The idea for the project came from [[http://maximecb.github.io/Turing-Drawings/][Maxime Chevalier-Boisvert]]s
website, where a simple Turing Drawing generator lets you see a quick
simulation of random rules (Cool examples [[http://maximecb.github.io/Turing-Drawings/#4,3,2,1,2,1,2,3,0,1,1,1,2,2,1,1,3,1,1,2,2,2,1,2,1,2,3,2,0,3,1,2,0,2,1,3,2,0][here]] and [[http://maximecb.github.io/Turing-Drawings/#4,3,3,1,3,2,2,2,1,1,3,3,1,2,1,1,1,3,1,0,2,2,0,2,1,3,0,2,3,2,1,3,0,1,3,3,1,0][here]]).

Another inspiration is Stephen Wolfram's /A New Kind of Science/ [1]. Here the simplest possible rules, Cellular Automata, are described and explored (esp. in chapter 3). 

And a clear precursor for this pixel-by-pixel evolution is Conway's Game of Life [2].

My project will differ from other implementations of Turing Drawings in the interactivity. Being able to change the rules 'mid-game' will completely alter the pattern that emerges. 

** Goals
The goal is to let the audience explore the patterns and flows that simple
rules can create. 

It is interesting to experience the rules unfold into patterns that can't be predicted from just thinking about the rules. They have to be simulated 'for the magic to happen'. 

** Implementation
I'll make a 2D Array, /world/, representing the state, ie. what is displayed on screen (This works for 2 colors, for 3 colors it should be a 3D Array, with the color in the third dimension). 

I have an 'active cell' that will move and update each time-step. It will update according to the rules picked from the list of all possible rules. 

*IDEA*: To get /really/ fast drawing, the active cell could run in a for loop in the draw function, and after we have looped for some time we update the screen with the current state of /world/. Might speed it up. Without it I can achieve sub 10k fps. But a display can update around 60 Hz. Right?


* Footnotes
[1] Stephen Wolfram, "A New Kind of Science," (Wolfram Media, 2002), [[http://www.wolframscience.com/nksonline/toc.html][Online here]]

[2] Martin Gardner, "Mathematical Games - The fantastic combinations of John Conway's new solitaire game 'life'". Scientific American 223. pp. 120â€“123 
